laughCMS Version 0.1
author wangbaoqing/lucen

2012-4-3 星期二
后台用户权限控制解决方案
采用组(group)与节点(node)的概念，组对应数据表la_group，节点对应数据表la_node
head导航栏链接为组，左侧导航栏链接为节点

用户进入后台，首先从数据库获取该用户所在角色的组与节点权限信息(表la_role_access)，然后获取某个用户单独的节点权限信息(la_user_access)，做合并处理后存入session(以后可以直接从session中获取该信息)，根据该权限信息可以将用户的组与节点控制界面展示给用户，用户可在此界面上进行权限内的管理操作。

用户访问某一节点时，首先在route里获取其访问的组与节点信息，然后调用CommonControl的checkUserAccess方法检查其是否对该节点有操作权限
检查过程：判断该节点是否在数据库中的node表里有记录，如果有，则到session里的useraccess信息中遍历该group与node信息，如果找到，说明该用户对该节点有操作权限，系统进入执行节点方法，如果未找到，说明该用户非法操作没有权限的节点，则拒绝为其处理，并跳转到首页，如果该节点在数据库中没有记录，跳过检查过程，并返回true。

如果某一方法未添加到数据库的node表，但我们又想为其做权限控制，可以为其绑定数据库里已有的某一节点node，这样在执行该方法时，会首先执行该绑定的node的权限检查，绑定之后，该方法与该节点具有相同的权限信息，权限检查过程同该节点，我们可以在方法开始加入代码
$this->_checkNodeAccess($group,$node);
$group为当前方法的组名
$node为要绑定的节点名
用此方法可以为某一节点内的增删改查等操作绑定该节点的权限信息

2012-9-27 星期四
推翻部分之前设计

关于框架思路以及权限设计
管理框架分为三层，第一层是最上面的导航层是大方向分类，第二层是左边的菜单树形结构，这里有两层。所有操作均在第三层完成。
第三层是Control-Action控制


将模板引擎换成smarty但保留系统原有的模板引擎
制作添加节点功能
可以任意添加一二三层节点 节点父层可以是任意一二层节点

2012-9-28 星期五
继续添加节点功能

2012-10-20 周六
顶部导航为:组
左边菜单为节点
